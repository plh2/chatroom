server {
    listen 80 default_server;
    server_name _;
    return 301 https://$host$request_uri;
}

log_format quic '$remote_addr - $remote_user [$time_local] '
                '"$request" $status $body_bytes_sent '
                '"$http_referer" "$http_user_agent" "$http3"';
access_log /var/log/nginx/access.log quic;

server {
    # gzip
    gzip on;                                                    # 是否开启gzip
    gzip_buffers 32 4K;                                         # 缓冲(压缩在内存中缓冲几块? 每块多大?)
    gzip_comp_level 6;                                          # 推荐6 压缩级别(级别越高,压的越小,越浪费CPU计算资源)
    gzip_min_length 1k;                                         # 开始压缩的最小长度(再小就不要压缩了,意义不在)
    gzip_types application/javascript text/css text/xml;        # 对哪些类型的文件用压缩 如txt,xml,html ,css
    gzip_disable "MSIE [1-6]\.";                                # 正则匹配UA，配置禁用gzip条件。此处表示ie6及以下不启用gzip（因为ie低版本不支持）
    gzip_http_version 1.1;                                      # 开始压缩的http协议版本(可以不设置,目前几乎全是1.1协议)
    gzip_vary on;                                               # 是否传输gzip压缩标志

    charset             utf-8;
    server_name         chat1.plhh.xyz;

    listen 443 quic reuseport;
    listen 443 ssl http2;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
    ssl_certificate      cert/fullchain.pem;
    ssl_certificate_key  cert/privkey.pem;

    # add_header Alt-Svc 'h3=":$server_port"; ma=2592000,h3-29=":$server_port"; ma=2592000';
    add_header Alt-Svc 'h3=":443"; ma=86400';
    add_header QUIC-Status $http3;
    proxy_set_header Host $host;

    location / {
        root /var/www/app;
        try_files $uri $uri/ /index.html;
        index  index.html;
    }

    location /api {
        proxy_pass http://backend:8080;
    }
    location /socket.io {
        proxy_pass http://backend:8080;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
    }
}
